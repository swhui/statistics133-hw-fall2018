invisible(x)
}
#' @title Is.Device Function
#' @description checks if the item in the function is a device
#' @param x any object
#' @return displays TRUE if the class of the object is device or FALSE is the class of the object is not device
is.device <- function(x) {
if (class(x) == "device") {
return(TRUE)
}
else {
return(FALSE)
}
}
# roll fair 8-sided die
set.seed(123)
fair_dev <- device(sides = letters[1:8], prob = rep(1/8, 8))
fair500 <- roll(fair_dev, times = 500)
# summary method
summary(fair500)
# extracting roll in position 500
fair500[500]
## [1] "h"
# replacing last roll
fair500[500] <- 'a'
fair500[500]
#' @export
"[<-.rolls" <- function(x, i, value) {
if (!(value %in% x$sides)){
stop(sprintf('\nreplacing value must be %s or %s', devicesides))
}
if (i > x$total | i < 1 | !is.integer(i)) {
stop("\nindex out of bounds or is not an integer")
}
x[i] <- value
return(value)
}
# extracting roll in position 500
fair500[500]
## [1] "h"
# replacing last roll
fair500[500] <- 'a'
fair500[500]
5 < 1
is.integer(500)
is.integer(500L)
#' @export
"[<-.rolls" <- function(x, i, value) {
if (!(value %in% x$sides)){
stop(sprintf('\nreplacing value must be %s or %s', devicesides))
}
if (i > x$total | i < 1 ) {
stop("\nindex out of bounds or is not an integer")
}
x[i] <- value
return(value)
}
# replacing last roll
fair500[500] <- 'a'
fair500[500]
#' @export
"[<-.rolls" <- function(x, i, value) {
if (!(value %in% x$sides)){
stop(sprintf('\nreplacing value must be %s or %s', devicesides))
}
if (i > x$total | i < 1 ) {
stop("\nindex out of bounds or is not an integer")
}
print("y")
x[i] <- value
return(value)
}
fair500[500] <- 'a'
x
i
value
#' @export
"[<-.rolls" <- function(x, i, value) {
if (!(value %in% x$sides)){
stop(sprintf('\nreplacing value must be %s or %s', devicesides))
}
if (i > x$total | i < 1 ) {
stop("\nindex out of bounds or is not an integer")
}
print("y")
x[i] <- value
print("q")
return(value)
}
fair500[500] <- 'a'
#' @export
"[<-.rolls" <- function(x, i, value) {
if (!(value %in% x$sides)){
stop(sprintf('\nreplacing value must be %s or %s', devicesides))
}
if (i > x$total | i < 1 ) {
stop("\nindex out of bounds or is not an integer")
}
print(value)
x[i] <- value
print("q")
return(value)
}
fair500[500] <- 'a'
#' @export
"[<-.rolls" <- function(x, i, value) {
if (!(value %in% x$sides)){
stop(sprintf('\nreplacing value must be %s or %s', devicesides))
}
if (i > x$total | i < 1 ) {
stop("\nindex out of bounds or is not an integer")
}
print(x[i])
x[i] <- value
print("q")
return(value)
}
fair500[500] <- 'a'
fair500[500]
#' @export
"[<-.rolls" <- function(x, i, value) {
if (!(value %in% x$sides)){
stop(sprintf('\nreplacing value must be %s or %s', devicesides))
}
if (i > x$total | i < 1 ) {
stop("\nindex out of bounds or is not an integer")
}
print(x[i])
x$rolls[i] <- value
print("q")
return(value)
}
fair500[500]
fair500[500] <- 'a'
fair500[500]
#' @export
"[<-.rolls" <- function(x, i, value) {
if (!(value %in% x$sides)){
stop(sprintf('\nreplacing value must be %s or %s', devicesides))
}
if (i > x$total | i < 1 ) {
stop("\nindex out of bounds or is not an integer")
}
# print(x[i])
x$rolls[i] <- value
# print("q")
# return(value)
}
fair500[500] <- 'a'
fair500[500]
people <- c(3, 4, 5, 6)
people2 <- c(3, 4, 5, 6)
length(c(people, people2))
#' @export
"+.rolls" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increment")
}
more_turns <- turn(obj$device, times = incr)
res <- list(
rolls = c(turns, more_turns),
sides = obj$sides,
prob = obj$prob,
total = length(c(turns, more_turns))
)
}
fair600 <- fair500 + 100
#' @export
"+.rolls" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increment")
}
more_turns <- sample(obj$sides, size = times, replace = TRUE, prob = obj$prob)
res <- list(
rolls = c(turns, more_turns),
sides = obj$sides,
prob = obj$prob,
total = length(c(turns, more_turns))
)
}
fair600 <- fair500 + 100
fair500$sides
names(fair500)
fair500
set.seed(123)
fair_dev <- device(sides = letters[1:8], prob = rep(1/8, 8))
fair500 <- roll(fair_dev, times = 500)
# summary method
summary(fair500)
# extracting roll in position 500
fair500[500]
summary(fair500)
fair500 + 100
#' @export
"+.rolls" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increment")
}
more_turns <- sample(obj$sides, size = incr, replace = TRUE, prob = obj$prob)
res <- list(
rolls = c(turns, more_turns),
sides = obj$sides,
prob = obj$prob,
total = length(c(turns, more_turns))
)
}
fair500 + 100
fair500
summary(fair500)
fair500
# roll fair 8-sided die
set.seed(123)
fair_dev <- device(sides = letters[1:8], prob = rep(1/8, 8))
fair500 <- roll(fair_dev, times = 500)
# summary method
summary(fair500)
fair500
fair500$rolls
#' @export
"+.rolls" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increment")
}
more_turns <- sample(obj$sides, size = incr, replace = TRUE, prob = obj$prob)
res <- list(
rolls = c(obj$rolls, more_turns),
sides = obj$sides,
prob = obj$prob,
total = length(c(obj$rolls, more_turns))
)
}
fair600 <- fair500 + 100
summary(fair600)
# roll fair 8-sided die
set.seed(123)
fair_dev <- device(sides = letters[1:8], prob = rep(1/8, 8))
fair500 <- roll(fair_dev, times = 500)
# summary method
summary(fair500)
# extracting roll in position 500
fair500[500]
fair600 <- fair500 + 100
summary(fair600)
# roll fair 8-sided die
set.seed(123)
fair_dev <- device(sides = letters[1:8], prob = rep(1/8, 8))
fair500 <- roll(fair_dev, times = 500)
# summary method
summary(fair500)
## summary "rolls"
##
## side count prop
## 1 a 63 0.126
## 2 b 54 0.108
## 3 c 73 0.146
## 4 d 69 0.138
## 5 e 69 0.138
## 6 f 51 0.102
## 7 g 65 0.130
## 8 h 56 0.112
# extracting roll in position 500
fair500[500]
## [1] "h"
# replacing last roll
fair500[500] <- 'a'
fair500[500]
## [1] "a"
summary(fair500)
## summary "rolls"
##
## side count prop
## 1 a 64 0.128
## 2 b 54 0.108
## 3 c 73 0.146
## 4 d 69 0.138
## 5 e 69 0.138
## 6 f 51 0.102
## 7 g 65 0.130
## 8 h 55 0.110
# adding 100 rolls
fair600 <- fair500 + 100
# roll fair 8-sided die
set.seed(123)
fair_dev <- device(sides = letters[1:8], prob = rep(1/8, 8))
fair500 <- roll(fair_dev, times = 500)
# summary method
summary(fair500)
# extracting roll in position 500
fair500[500]
## [1] "h"
# replacing last roll
fair500[500] <- 'a'
fair500[500]
#' @export
"[<-.rolls" <- function(x, i, value) {
if (!(value %in% x$sides)){
stop(sprintf('\nreplacing value must be %s or %s', devicesides))
}
if (i > x$total | i < 1 ) {
stop("\nindex out of bounds or is not an integer")
}
x$rolls[i] <- value
}
fair500[500]
rm(list = ls())
#' @title check_sides function
#' @description checks if sides of the rolling die has at least 2 elements, numeric/character sides, and has no duplicated elements
#' @param sides vector
#' @return TRUE if conditions are met or FALSE if any one of the conditions are not met
check_sides <- function(sides){
if (length(sides) <= 1) {
stop("'sides' must be a vector of length greater than 1")
}
if (!is.numeric(sides) & !is.character(sides)) {
stop("\n'sides' must be a character or numeric vector")
}
if (any(duplicated(sides))) {
stop("'sides' cannot have duplicated elements")
}
TRUE
}
#' @title check_prob function
#' @description checks if the probability has any NA values, each probability is between 0 and 1 inclusive, and the elements in the probability add up to 1
#' @param prob vector of probabilities for each side
#' @return TRUE if conditions are met or FALSE if any one of the conditions are not met
check_prob <- function(prob){
if (length(prob) <= 1) {
stop("prob must have a length of at least 2")
}
if (any(is.na(prob))) {
stop("\n'prob' cannot contain missing values")
}
if (any(prob < 0) | any(prob > 1)) {
stop("\n'prob' values must range within 0 and 1")
}
if (sum(prob) != 1) {
stop("\nelements in 'prob' must add up to 1")
}
TRUE
}
#' @title Device
#' @description stimulates rollin and object using the object of class "device"
#' @param sides vector of k >= 2 elements by default numbers 1 and 2, which must be of the same length as prob
#' @param prob vector of probabilities for each side (all equal to 1/2 by default), which must be of the same length as sides
#' @return displays the class of the object, and a tabular display of the sides and the associated probabilities
device <- function(sides = c("1", "2"), prob = c(0.5, 0.5)) {
if (length(sides) != length(prob)) {
stop("'sides' and 'prob' have different lengths")
}
check_sides(sides)
check_prob(prob)
object <- list(
sides = sides,
prob = prob)
class(object) <- "device"
object
}
#' @export
print.device <- function(x, ...) {
cat('object "device"\n\n')
print(data.frame("side" = x$sides, "prob" = x$prob))
invisible(x)
}
#' @title Is.Device Function
#' @description checks if the item in the function is a device
#' @param x any object
#' @return displays TRUE if the class of the object is device or FALSE is the class of the object is not device
is.device <- function(x) {
if (class(x) == "device") {
return(TRUE)
}
else {
return(FALSE)
}
}
#' @title Rolls function
#' @description creates an object of class \code{"roll"}
#' @param device object of class \code{"roll"}
#' @param times number of tosses
#' @return an object of class \code{"roll"} with the following elements:
#' @return \item{rolls}{vector of outputs of the rolls}
#' @return \item{sides}{vector of "device" object \code{"sides"}}
#' @return \item{prob}{vector of "device" object \code{"prob"}}
#' @return \item{total}{total number of rolls ie times}
#' @export
#' @examples
roll <- function(obj, times = 1) {
if (class(obj) != "device") {
stop('device is not of class "device"')
}
check_times(times)
turns <- sample(obj$sides, size = times, replace = TRUE, prob = obj$prob)
res <- list(
rolls = turns,
sides = obj$sides,
prob = obj$prob,
total = length(turns)
)
class(res) <- "rolls"
res
}
# private function to check vector of 'times'
#' @title check_times function
#' @description checks if the number of times is a positive integer
#' @param times a numeric input
#' @return TRUE if times is a positive integer or FALSE is times is not a positive integer
check_times <- function(times) {
if (times <= 0 | is.integer(times)) {
stop("\nargument 'times' must be a positive integer")
} else {
TRUE
}
}
#' @export
print.rolls <- function(x, ...) {
cat('object "rolls"\n\n')
cat('$rolls\n')
print(x$rolls)
invisible(x)
}
#' @export
summary <- function(x) {
proportions <- c()
for (i in 1:length(x$sides)) {
proportions[i] <- sum(x$rolls == x$sides[i]) / x$total
}
counts1 <- c()
for (i in 1: length(x$sides)) {
counts1[i] <- sum(x$rolls == x$sides[i])
}
freqs <- data.frame(
side = x$sides,
count = counts1,
prop = proportions)
obj <- list(freqs = freqs)
class(obj) <- "summary.rolls"
obj
}
#' @export
print.summary.rolls <- function(x) {
cat('summary "rolls"\n\n')
print(x$freqs)
invisible(x)
}
#' @export
plot.rolls <- function(x) {
table = summary(x)
barplot(table$freqs$prop,
names.arg = c(as.character(table$freqs$side)),
main = paste("Relative Frequencies in a series of",
sum(table$freqs$count), "rolls",
sep =  " "),
xlab = "sides of device",
ylab = "relative frequences",
border = "grey")
}
#' @export
"[.rolls" <- function(x, i) {
x$rolls[i]
}
#' @export
"[<-.rolls" <- function(x, i, value) {
if (!(value %in% x$sides)){
stop(sprintf('\nreplacing value must be %s or %s', devicesides))
}
if (i > x$total | i < 1 ) {
stop("\nindex out of bounds or is not an integer")
}
x$rolls[i] <- value
}
#' @export
"+.rolls" <- function(obj, incr) {
if (length(incr) != 1 | incr <= 0) {
stop("\ninvalid increment")
}
more_turns <- sample(obj$sides, size = incr, replace = TRUE, prob = obj$prob)
res <- list(
rolls = c(obj$rolls, more_turns),
sides = obj$sides,
prob = obj$prob,
total = length(c(obj$rolls, more_turns))
)
}
# roll fair 8-sided die
set.seed(123)
fair_dev <- device(sides = letters[1:8], prob = rep(1/8, 8))
fair500 <- roll(fair_dev, times = 500)
# summary method
summary(fair500)
# extracting roll in position 500
fair500[500]
# replacing last roll
fair500[500] <- 'a'
fair500[500]
#' @export
"[<-.rolls" <- function(x, i, value) {
if (!(value %in% x$sides)){
stop(sprintf('\nreplacing value must be %s or %s', devicesides))
}
if (i > x$total | i < 1 ) {
stop("\nindex out of bounds or is not an integer")
}
x$rolls[i] <- value
}
fair500[500]
set.seed(123)
fair_dev <- device(sides = letters[1:8], prob = rep(1/8, 8))
fair500 <- roll(fair_dev, times = 500)
fair500
fair500[500]
fair500[500] <- 'a'
fair500[500]
