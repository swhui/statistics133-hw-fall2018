end24 <-
format(strptime(dat$endtime, "%I%p"), format="%H:%M")
end24 <- as.numeric(end24)
end24
dat$endtime
start24 <-
format(strptime(dat$starttime, "%I%p"), format="%H:%M")
start24 <- as.numeric(start24)
end24 <-
format(strptime(dat$endtime, "%I%p"), format="%H:%M")
end24 <- as.numeric(end24)
is.na(dat$endtime)
end24 <-
format(strptime(dat$endtime, "%I%p"), format="%H:%M")
end24 <- as.numeric(end24)
format(strptime(dat$endtime, "%I%p"), format="%H:%M")
end24
format(strptime(dat$endtime, "%I%p"), format="%H:%M")
end24 <-
format(strptime(dat$endtime, "%I%p"), format="%H:%M")
end24
start24
start24 <-
format(strptime(dat$starttime, "%I%p"), format="%H")
start24 <- as.numeric(start24)
end24 <-
format(strptime(dat$endtime, "%I%p"), format="%H")
end24 <- as.numeric(end24)
end24
start24
View(dat)
dat <- mutate(start24, end24)
dat <- mutate(dat, start24, end24)
end24-start24
duration <- end24-start24
dat <- mutate(dat, duration)
str_replace(loc1, pattern = '\\)', replacement = '')
str_replace(loc1, pattern = '\\(', replacement = '')
str_replace_all(loc1, pattern = '\\(|\\)', replacement = '')
latit_long1 <- str_replace_all(locs, pattern = '\\(|\\)', replacement = '')
lat_lon <- str_split(str_split(latit_long1, pattern = ','))
latit_long1 <- str_replace_all(locs, pattern = '\\(|\\)', replacement = '')
lat_lon <- str_split(str_split(latit_long1, pattern = ","))
latit_long1 <- str_replace_all(locs, pattern = '\\(|\\)', replacement = '')
lat_lon <- str_split(latit_long1, pattern = ","))
latit_long1 <- str_replace_all(locs, pattern = '\\(|\\)', replacement = '')
lat_lon <- str_split(latit_long1, pattern = ",")
latit_long1 <- str_replace_all(locs, pattern = '\\(|\\)', replacement = '')
lat_lon <- str_split(latit_long1, pattern = ",")
lat_lon
lat <- lapply(lat_lon, function(x) x[1])
lon <- lapply(lat_lon, function(x) x[2])
lat <- lapply(lat_lon, function(x) x[1])
lat
lon <- lapply(lat_lon, function(x) x[2])
lon
dat <- mutate(dat, lat, lon)
dat$Location
latit_long1 <- str_replace_all(dat$Location, pattern = '\\(|\\)', replacement = '')
lat_lon <- str_split(latit_long1, pattern = ",")
lat_lon
lat <- lapply(lat_lon, function(x) x[1])
lat
lon <- lapply(lat_lon, function(x) x[2])
lon
latit_long1 <- str_replace_all(dat$Location, pattern = '\\(|\\)', replacement = '')
lat_lon <- str_split(latit_long1, pattern = ",")
lat <- lapply(lat_lon, function(x) x[1])
lon <- lapply(lat_lon, function(x) x[2])
lat <- as.numeric(unlist(lat))
lon <- as.numeric(unlist(lon))
dat <- mutate(dat, lat, lon)
plot(dat$lon, dat$lat, pch = 19, col = "#77777744")
plot(dat$lon, dat$lat, pch = 19, col = "#77777744", cex = .5)
# default scatterplot
plot_ly(x = lon, y = lay)
# install.packages("RgoogleMaps")
install.packages("RgoogleMaps")
install.packages("ggmap")
# remember to install ggmap
# install.packages("ggmap")
library(ggmap)
# skip this part (come back if you run into some error messages)
# (go back to a previous version of ggplot)
devtools::install_github("hadley/ggplot2@v2.2.0")
# add variables 'lat' and 'lon' to the data frame
dat$lat <- latitude
# install.packages("RgoogleMaps")
library(RgoogleMaps)
# coordinates for center of the map
center <- c(mean(dat$lat, na.rm = TRUE), mean(dat$lon, na.rm = TRUE))
# zoom value
zoom <- min(MaxZoom(range(dat$lat, na.rm = TRUE),
range(dat$lon, na.rm = TRUE)))
# san francisco map
map1 <- GetMap(center=center, zoom=zoom, destfile = "san-francisco.png")
PlotOnStaticMap(map1, dat$lat, dat$lon, col = "#ed4964", pch=20)
# remember to install ggmap
# install.packages("ggmap")
library(ggmap)
# add variables 'lat' and 'lon' to the data frame
dat$lat <- latitude
lat
latitude <- as.numeric(unlist(lat))
longitude <- as.numeric(unlist(lon))
lat <- as.numeric(unlist(lat))
lon <- as.numeric(unlist(lon))
longitude <- lon
latitude <- lat
# add variables 'lat' and 'lon' to the data frame
dat$lat <- latitude
dat$lon <- longitude
# let's get rid of rows with missing values
dat <- na.omit(dat)
dat$optionaltext[1:3]
foods <- dat$optionaltext[1:10]
foods <- dat$optionaltext[1:10]
str_detect()
?str_detect
str_detect(foods, pattern = "Burritos")
str_detect(foods, pattern = "burritos")
foods
foods <- dat$optionaltext[1:10]
foods
?grepl
grepl(pattern = "burritos", ignore.case = TRUE)
grepl(pattern = "burritos", x = foods ignore.case = TRUE)
grepl(pattern = "burritos", x = foods, ignore.case = TRUE)
str_detect(foods, pattern = "Burritos")
str_detect(foods, pattern = "burritos")
str_detect(foods, paste(c("Burritos", "burritos")))
grepl(pattern = paste(c("tacos", "quesadillas")), x = foods, ignore.case = TRUE)
grepl(paste(c("tacos", "quesadillas")), x = foods, ignore.case = TRUE)
grepl("tacos|quesadillas", x = foods, ignore.case = TRUE)
str_detect(foods, "burritos|Burritos")
grepl("tacos|quesadillas", x = foods, ignore.case = TRUE)
str_detect(foods, "tacos|quesadillas")
grepl("tacos|quesadillas", x = foods, ignore.case = TRUE)
str_detect(foods, "tacos|quesadillas")
str_detect(foods, "burritos|Burritos")
grepl("tacos|quesadillas", x = foods, ignore.case = TRUE)
str_detect(foods, "tacos|Tacos|quesadillas|")
grepl(pattern = "burritos", x = foods, ignore.case = TRUE)
grepl("tacos|quesadillas", x = foods, ignore.case = TRUE)
str_detect(foods, "tacos|Tacos|quesadillas|")
grepl("tacos|quesadillas", x = foods, ignore.case = TRUE)
str_detect(foods, "Tacos|quesadillas|")
grepl("tacos|quesadillas", x = foods, ignore.case = TRUE)
str_detect(foods, "Tacos|quesadillas")
grepl("tacos|quesadillas", x = foods, ignore.case = TRUE)
str_detect(foods, "tacos|Tacos|quesadillas|Quesadillas")
dat %>%
filter(
str_detect(optionaltext, "burritos|Burritos")
)
burritos <- (dat %>%
filter(
str_detect(optionaltext, "burritos|Burritos")
))
View(burritos)
# coordinates for center of the map
center2 <- c(mean(burritos$lat, na.rm = TRUE), mean(burritos$lon, na.rm = TRUE))
# zoom value
zoom2 <- min(MaxZoom(range(burritos$lat, na.rm = TRUE),
range(burritos$lon, na.rm = TRUE)))
# san francisco map
map2 <- GetMap(center=center, zoom=zoom, destfile = "burritos.png")
PlotOnStaticMap(map2, burritos$lat, burritos$lon, col = "#dd4964", pch=20)
# coordinates for center of the map
center2 <- c(mean(burritos$lat, na.rm = TRUE), mean(burritos$lon, na.rm = TRUE))
# zoom value
zoom2 <- min(MaxZoom(range(burritos$lat, na.rm = TRUE),
range(burritos$lon, na.rm = TRUE)))
# san francisco map
map2 <- GetMap(center=center2, zoom=zoom2, destfile = "burritos.png")
PlotOnStaticMap(map2, burritos$lat, burritos$lon, col = "#dd4964", pch=20)
tacos_quesadillas <- (dat %>%
filter(
grepl("tacos|quesadillas", x = foods, ignore.case = TRUE)
))
tacos_quesadillas <- (dat %>%
filter(
grepl("tacos|quesadillas", x = optionaltext, ignore.case = TRUE)
))
# coordinates for center of the map
center3 <- c(mean(tacos_quesadillas$lat, na.rm = TRUE), mean(tacos_quesadillas$lon, na.rm = TRUE))
# zoom value
zoom3 <- min(MaxZoom(range(tacos_quesadillas$lat, na.rm = TRUE),
range(tacos_quesadillas$lon, na.rm = TRUE)))
# san francisco map
map3 <- GetMap(center=center3, zoom=zoom3, destfile = "tacos_quesadillas.png")
PlotOnStaticMap(map3, tacos_quesadillas$lat, tacos_quesadillas$lon, col = "#ab4573", pch=20)
knitr::opts_chunk$set(echo = TRUE)
tacos_quesadillas <- (dat %>%
filter(
grepl("tacos|quesadillas", x = optionaltext, ignore.case = TRUE)
))
tacos_quesadillas <- (dat %>%
filter(
grepl("tacos|quesadillas", x = optionaltext, ignore.case = TRUE)
))
dat <- mutate(dat, start24, end24)
library(dplyr)
dat <- mutate(dat, start24, end24)
library(dplyr)
dat <- mutate(dat, start24, end24)
dat
start24 <- format(strptime(dat$starttime, "%I%p"), format="%H")
start24 <- as.numeric(start24)
end24 <-
format(strptime(dat$endtime, "%I%p"), format="%H")
end24 <- as.numeric(end24)
library(dplyr)
dat <- mutate(dat, start24, end24)
dat
x <- c(5, 6, 7, 23, 24, 29, 30, 35, 36, 23, 24, 22, 22, 24, 19, 19, 23, 26, 29, 35, 42, 19, 20, 26, 29, 27, 22, 23)
length(x = )
length(x)
mean(x)
sum(x)
?dbinom
dbinom(0, 5, 1/2)
1/2^5
dbinom(5, 5, 1/2)
dbinom(1, 5, 1/2)
dbinom(4, 5, 1/2)
dbinom(3, 5, 1/2)
dbinom(2, 5, 1/2)
1*0.15625+4*0.15625+2*0.3125+3*0.3125+5*(1/2^5)
setwd(workout02)
getwd
getwd()
setwd(Desktop/hw-stat133/workout02)
setwd(/Desktop/hw-stat133/workout02)
setwd(/Users/sharonhui/Desktop/hw-stat133/workout02)
setwd(Users/sharonhui/Desktop/hw-stat133/workout02)
setwd(../sharonhui/Desktop/hw-stat133/workout02)
setwd("~/Desktop/hw-stat133/workout02/code/tests")
library(testthat)
test_file("test-minkowski.R")
expect_equal(minkowski(point1, point3, p = 2), 2)
point1 <- c(0, 0)
point2 <- c(1, 1)
point3 <- sqrt(c(2, 2))
point4 <- c(0, 1)
point5 <- c(1, 1, 1)
expect_equal(minkowski(point1, point2, p = 1), 2)
expect_equal(minkowski(point1, point3, p = 2), 2)
minkowski(point1, point3, p = 2), 2
minkowski(point1, point3, p = 2)
minkowski(point1, point2, p = 1)
minkowski(point1, point2, p = 1)
minkowski(point1, point3, p = 2)
(sum(abs(point1, point3))^2)*(1/2)
(sum(abs(point1-point3))^2)*(1/2)
point1-point3
abs(point1-point3)
sum(abs(point1-point3))
sum(abs(point1-point3))^2
test_file("test-minkowski.R")
(sum((abs(point1-point3))^2))^(1/2)
test_file("test-minkowski.R")
(sum((abs(point1-point3))^2))^(1/2)
expect_equal(minkowski(point1, point3, p = 2), 2)
minkowski(point1, point3, p = 2)
#' @title Minkowski Distance
#' @description calculates the Minkowski distance between points of order p using the p-norm distance
#' @param x a numeric vector for one point
#' @param y a numeric vector for another point
#' @param p either a numeric value greater than 1 or a character string max with a default 1
#' @return calculated Minkowski distance
minkowski <- function(x, y, p = 1) {
if (length(x) != length(y)) {
stop("x and y have different lengths")
}
else if (is.numeric(p) == TRUE) {
if ((p > 1) == FALSE) {
stop("p cannot be less than one")
}
else     (sum((abs(x-y))^p))^(1/p)
}
else if (p < 1) {
stop("p cannot be less than 1")
}
else if (is.character(p) == TRUE) {
if (p != "max") {
stop("invalid character value for p")
}
else
max((abs(x-y)))
}
}
test_file("test-minkowski.R")
test_file("test-minkowski.R")
minkowski <- function(x, y, p = 1) {
if (length(x) != length(y)) {
stop("x and y have different lengths")
}
else if (is.numeric(p) == TRUE) {
if ((p > 1) == FALSE) {
stop("p cannot be less than one")
}
else (sum((abs(x-y))^p))^(1/p)
}
else if (p < 1) {
stop("p cannot be less than 1")
}
else if (is.character(p) == TRUE) {
if (p != "max") {
stop("invalid character value for p")
}
else
max((abs(x-y)))
}
}
minkowski(point1, point2, p = 1)
minkowski <- function(x, y, p = 1) {
if (length(x) != length(y)) {
stop("x and y have different lengths")
}
else if (is.numeric(p) == TRUE) {
if ((p >= 1) == FALSE) {
stop("p cannot be less than one")
}
else (sum((abs(x-y))^p))^(1/p)
}
else if (p < 1) {
stop("p cannot be less than 1")
}
else if (is.character(p) == TRUE) {
if (p != "max") {
stop("invalid character value for p")
}
else
max((abs(x-y)))
}
}
minkowski(point1, point2, p = 1)
minkowski(point1, point3, p = 2)
minkowski(point1, point2, p = 'max')
minkowski(point1, point2, p = 1)
test_file("test-minkowski.R")
HEX
?hex
??hex
colors()
col2rgb()
col2rgb(colors())
colors()
rgb()
rgb(colors())
rgb(white)
rgb("white")
??rgb
RGB2hex("#FF0000")
hex2RGB(c("#FF0000"))
hex2RGB(c("#FF0000","#00FF00", "#0000FF50"))
col2rgb("peachpuff")
col2rgb("#08a0ff")
col2rgb(colors())
rgb(col2rgb(colors()))
rgb(col2rgb(colors()), maxColorValue = 255)
GetColorHexAndDecimal <- function(color)
{
c <- col2rgb(color)
sprintf("#%02X%02X%02X", c[1],c[2],c[3], c[1], c[2], c[3])
}
GetColorHexAndDecimal("yellow")
GetColorHexAndDecimal(colors())
colors()
GetColorHexAndDecimal("white")
GetColorHexAndDecimal("colors()")
c <- col2rgb(color)
sprintf("#%02X%02X%02X", c[1],c[2],c[3], c[1], c[2], c[3])
as.vector(colors())
GetColorHexAndDecimal(as.vector(colors()))
GetColorHexAndDecimal <- function(color){
c <- col2rgb(color)
sprintf("#%02X%02X%02X", c[1],c[2],c[3], c[1], c[2], c[3])
}
GetColorHex <- function(color){
c <- col2rgb(color)
sprintf("#%02X%02X%02X", c[1],c[2],c[3], c[1], c[2], c[3])
}
GetColorHex(c("yellow", "white"))
GetColorHex("yellow")
GetColorHex("white")
GetColorHex(list("yellow", "white"))
funxtiontest <- function(x){}
funxtiontest <- function(x){
x+2
}
funxtiontest(c(3, 4, 5))
?sprintf
GetColorHex <- function(x){
c <- col2rgb(x)
sprintf("#%02X%02X%02X")
}
GetColorHex(list("yellow", "white"))
GetColorHex(c("yellow", "white"))
GetColorHex("yellow")
GetColorHex <- function(x){
c <- col2rgb(x)
sprintf("#%02X%02X%02X", c[1],c[2],c[3], c[1], c[2], c[3])
}
GetColorHex("yellow")
GetColorHex(c("yellow", "white"))
col2rgb(colors())
c <- col2rgb(colors())
View(c)
sprintf("#%02X%02X%02X", c[1],c[2],c[3], c[1], c[2], c[3])
?sprintf
knitr::opts_chunk$set(echo = TRUE)
tacos_quesadillas <- (dat %>%
filter(
grepl("tacos|quesadillas", x = optionaltext, ignore.case = TRUE)
))
library(dplyr)
dat <- mutate(dat, start24, end24)
dat
library(dplyr)
dat <- mutate(dat, start24, end24)
dat
start24 <- format(strptime(dat$starttime, "%I%p"), format="%H")
start24 <- as.numeric(start24)
end24 <-
format(strptime(dat$endtime, "%I%p"), format="%H")
end24 <- as.numeric(end24)
library(dplyr)
dat <- mutate(dat, start24, end24)
dat
library(dplyr)
dat <- mutate(dat, c(start24, end24))
library(dplyr)
dat <- mutate(dat, start24)
dat
library(dplyr)
dat <- mutate(dat, start24)
dat <- mutate(dat, end24)
dat
library(dplyr)
dat <- mutate(dat, start24 = start24, end24 = end24)
dat
library(dplyr)
dat$start24 <- start24
dat$end24 <- end24
dat
tacos <- (dat %>%
filter(
grepl("tacos", x = optionaltext, ignore.case = TRUE)
))
# coordinates for center of the map
center3 <- c(mean(tacos$lat, na.rm = TRUE), mean(tacos$lon, na.rm = TRUE))
# zoom value
zoom3 <- min(MaxZoom(range(tacos$lat, na.rm = TRUE),
range(tacos$lon, na.rm = TRUE)))
quesadillas <- (dat %>%
filter(
grepl("quesadillas", x = optionaltext, ignore.case = TRUE)
))
# coordinates for center of the map
center5 <- c(mean(quesadillas$lat, na.rm = TRUE), mean(quesadillas$lon, na.rm = TRUE))
# zoom value
zoom5 <- min(MaxZoom(range(quesadillas$lat, na.rm = TRUE),
range(quesadillas$lon, na.rm = TRUE)))
types <- data.frame(c(tacos, burritos, quesadillas))
rbind()
data.frame(rbind(tacos, burritos, quesadillas))
types <- data.frame(rbind(tacos, burritos, quesadillas))
types <- data.frame(rbind(tacos, burritos, quesadillas, lat, lon))
View(types)
library(ggplot2)
types <- data.frame(rbind(tacos, burritos, quesadillas, lat, lon))
sbbox2 <- make_bbox(lon = types$lon, lat = types$lat, f = .1)
# install.packages("RgoogleMaps")
library(RgoogleMaps)
# coordinates for center of the map
center <- c(mean(dat$lat, na.rm = TRUE), mean(dat$lon, na.rm = TRUE))
# zoom value
zoom <- min(MaxZoom(range(dat$lat, na.rm = TRUE),
range(dat$lon, na.rm = TRUE)))
# san francisco map
map1 <- GetMap(center=center, zoom=zoom, destfile = "san-francisco.png")
PlotOnStaticMap(map1, dat$lat, dat$lon, col = "#ed4964", pch=20)
# coordinates for center of the map
center <- c(mean(dat$lat, na.rm = TRUE), mean(dat$lon, na.rm = TRUE))
# zoom value
zoom <- min(MaxZoom(range(dat$lat, na.rm = TRUE),
range(dat$lon, na.rm = TRUE)))
# san francisco map
map1 <- GetMap(center=center, zoom=zoom, destfile = "san-francisco.png")
PlotOnStaticMap(map1, dat$lat, dat$lon, col = "#ed4964", pch=20)
# get a 'terrain' map
sf_map <- get_map(location = sbbox, maptype = "terrain", source = "google")
# ggmap typically asks you for a zoom level,
# but we can try using ggmap's make_bbox function:
sbbox <- make_bbox(lon = dat$lon, lat = dat$lat, f = .1)
# add variables 'lat' and 'lon' to the data frame
dat$lat <- latitude
# remember to install ggmap
# install.packages("ggmap")
library(ggmap)
length(dat$lat)
# add variables 'lat' and 'lon' to the data frame
dat$lat <- latitude
# remember to install ggmap
# install.packages("ggmap")
library(ggmap)
devtools::install_github("hadley/ggplot2@v2.2.0")
devtools::install_github("hadley/ggplot2@v2.2.0")
install.packages('devtools')
devtools::install_github("hadley/ggplot2@v2.2.0")
