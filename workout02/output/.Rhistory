#' @title Is Hex Function
#' @description checks whether an input string is a valid hex color without an alpha transparency value
#' @param col a string of characters
#' @return TRUE if the input is a valid hex color without an alpha transparency value, FALSE if not, or "invalid input; a string was expected"
library(stringr)
is_hex <- function(col) {
if ((is.character(col) & length(col) == 1) != TRUE) {
stop("invalid input; a string was expected")
}
else if ((str_detect(col,
pattern = "^#[A-Fa-f0-9]{6}") & length(unlist((str_split(col, "")))) == 7) == TRUE) {
return(TRUE) }
else if((str_detect(col,
pattern = "^#[A-Fa-f0-9]{6}") & length(unlist((str_split(col, "")))) == 7) != TRUE) {
return(FALSE) }
}
#' @title Is Hex Alpha Function
#' @description checks whether an input string is a valid hex color with an alpha transparency value
#' @param col a string of characters
#' @return TRUE if the input is a valid hex color with an alpha transparency value, FALSE if not, or "invalid input; a string was expected"
is_hex_alpha <- function(col) {
if ((is.character(col) & length(col) == 1) != TRUE) {
stop("invalid input; a string was expected")
}
else if ((str_detect(col,
pattern = "^#[A-Fa-f0-9]{8}") & length(unlist((str_split(col, "")))) == 9) == TRUE) {
return(TRUE) }
else if((str_detect(col,
pattern = "^#[A-Fa-f0-9]{8}") & length(unlist((str_split(col, "")))) == 9) != TRUE) {
return(FALSE) }
}
library(testthat)
expect_true(is_hex("#FF00A7"))
expect_true(is_hex("#ff0000"))
expect_true(is_hex("#123456"))
expect_true(is_hex("#12Fb56"))
expect_false(is_hex("FF0000"))
expect_false(is_hex("#1234GF"))
expect_false(is_hex("#1234567"))
expect_false(is_hex("blue"))
expect_error(is_hex(FF00A7))
expect_error(is_hex(TRUE))
expect_true(is_hex_alpha("#FF000078"))
expect_true(is_hex_alpha("#ffda0078"))
expect_false(is_hex_alpha("#FF0000"))
expect_false(is_hex_alpha("#ffda00"))
expect_error(is_hex_alpha(FF00A7))
expect_error(is_hex_alpha(TRUE))
numeric(1)
library(stringr)
reverse_chars <- function(x){
paste(rev(unlist((str_split(x, "")))), collapse = "")
}
reverse_chars("jane is a good person")
reverse_chars("i hope that I get an a in stat133")
pets <- "step on no pets"
ep <- "expecto patronum"
pe <- "munortap otcepxe"
car_cat <- "Was it a car or a cat I saw?"
tac_rac <- "?was I tac a ro rac a ti saW"
expect_equal(reverse_chars(pets), pets)
expect_equal(reverse_chars(ep), pe)
expect_equal(reverse_chars(car_cat), tac_rac)
expect_length(reverse_chars(car_cat), 1)
expect_type(reverse_chars(car_cat), "character")
expect_equal(nchar(reverse_chars(car_cat)), nchar(reverse_chars(tac_rac)))
reverse_chars("apples are for chumps")
#' @title Minkowski Distance
#' @description calculates the Minkowski distance between points of order p using the p-norm distance
#' @param x a numeric vector for one point
#' @param y a numeric vector for another point
#' @param p either a numeric value greater than 1 or a character string max with a default 1
#' @return calculated Minkowski distance
minkowski <- function(x, y, p = 1) {
if (length(x) != length(y)) {
stop("x and y have different lengths")
}
else if (is.numeric(p) == TRUE) {
if ((p < 1) == TRUE) {
stop("p cannot be less than one")
}
else
sum <- 0
a <- c()
z <- c()
for (i in 1:length(x)) {
z[i] <- x[i]-y[i]
a[i] <- (abs(z[i]))^(p)
sum <- a[i]+sum }
return(sum^(1/p))
}
else if (is.character(p) == TRUE) {
if (p != "max") {
stop("invalid character value for p")
}
else
a <- c()
z <- c()
for (i in 1:length(x)) {
z[i] <- x[i]-y[i]
a[i] <- (abs(z[i]))}
return(max(a))
}
}
minkowski(c(3, 4, 5, 6), c(4, 5, 7, 3), p = 4)
minkowski(c(3, 4, 5, 6), c(4, 5, 7, 3), p = "max")
minkowski(c(3, 4, 5, 6), c(4, 5, 7, 3, 5), p = "max")
minkowski(c(3, 4, 5, 6, 7), c(4, 5, 7, 3, 9), p = "max")
minkowski(c(3, 4, 5, 6, 7), c(4, 5, 7, 3, 9), p = 4)
x <- c(3, 4, 5, 6, 7)
y <- c(4, 5, 7, 3, 9)
for(i in length(x)){
m = (abs(x[i]-y[i]))^4
a = a + m
}
return(a^(1/4))
a = 0
for(i in length(x)){
m = (abs(x[i]-y[i]))^4
a = a + m
}
return(a^(1/4))
m = (abs(x[i]-y[i]))^4
m
minkowski(c(3, 4, 5, 6), c(4, 5, 7, 3), p = 4)
count_vowels <- function(x){
if ((is.character(x) & length(x) == 1) != TRUE) {
stop("invalid input; a string was expected") }
else if ((is.character(x) & length(x) == 1) == TRUE){
(c("a" = as.double(sum(str_detect((unlist(str_extract_all(x, pattern = "[aeiouAEIOU]"))), pattern = "a|A"))),
"e" = as.double(sum(str_detect((unlist(str_extract_all(x, pattern = "[aeiouAEIOU]"))), pattern = "e|E"))),
"i" = as.double(sum(str_detect((unlist(str_extract_all(x, pattern = "[aeiouAEIOU]"))), pattern = "i|I"))),
"o" = as.double(sum(str_detect((unlist(str_extract_all(x, pattern = "[aeiouAEIOU]"))), pattern = "o|O"))),
"u" = as.double(sum(str_detect((unlist(str_extract_all(x, pattern = "[aeiouAEIOU]"))), pattern = "u|U")))
))
}
}
fox <- "The quick brown fox jumps over the lazy dog"
FOX <- "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"
do <- "do or do not"
vowels <- c('a', 'e', 'i', 'o', 'u')
counts <- c(1, 3, 1, 4, 2)
names(counts) <- vowels
expect_equal(count_vowels(fox), counts)
expect_equal(count_vowels(FOX), counts)
expect_length(count_vowels(fox), 5)
expect_named(count_vowels(fox), vowels)
expect_type(count_vowels(fox), 'double')
expect_length(count_vowels(do), 5)
expect_error(count_vowels(123))
expect_error(count_vowels(TRUE))
# ===================================================================
# Title: List of Tests for Functions  of Workout 02
# Description:
#   This script performs tests on the functions `minkowski()`, `is_hex()`,
# `is_hex_alpha()`, `reverse_chars()`, and `count_vowels()`
# Input(s): R scripts:  minkowski.R
#                       hex-color.R
#                       reverse-chars.R
#                       count-vowels.R
#                       test-minkowski.R
#                       test-hex-color.R
#                       test-reverse-chars.R
#                       test-count-vowels.R
# Output(s): text file: test-output.txt
# Author: Sharon Hui
# Date: 10/06/2018
# ===================================================================
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
setwd("~/Desktop/hw-stat133/workout02/output")
library('testthat')
functions <- dir('../code/functions')
lapply(paste0('../code/functions/', functions), source)
sink(file = 'test-output.txt')
test_dir('../code/tests')
sink()
