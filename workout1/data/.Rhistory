)), desc(average_points3)), 5)
rev(problem)
arrange(problem, rev(average_points3))
arrange(problem, (average_points3))
tail(arrange((summarise(
group_by(dat, team),
average_points3 = mean(points3)
)), desc(average_points3)), 5)
arrange((tail(arrange((summarise(
group_by(dat, team),
average_points3 = mean(points3)
)), desc(average_points3)), 5)), (average_points3))
summarise(select(filter(dat, dat$position == "PF", dat$experience >=5 & dat$experience <= 10), age), mean_power_forwards = mean(age))
summarise(select(filter(dat, dat$position == "PF", dat$experience >=5 & dat$experience <= 10), age), sd_power_forwards = sd(age))
summarise(select(filter(dat, dat$position == "PF", dat$experience >=5 & dat$experience <= 10), age), mean_power_forwards = mean(age), sd_power_forwards = sd(age))
summarise(select(filter(dat, dat$position == "PF", dat$experience >=5 & dat$experience <= 10), age), sd_power_forwards = sd(age))
summarise(select(filter(dat, dat$position == "PF", dat$experience >=5 & dat$experience <= 10), age), mean_power_forwards = mean(age), sd_power_forwards = sd(age))
ggplot(data = gsw, aes(x = height, y = weight)) +
geom_point() +
geom_label(aes(label = player))
ggplot(data = gsw, aes(x = height, y = weight)) +
geom_point() +
geom_text(aes(label = player))
ggplot(data = filter(dat, team == "GSW"), aes(x = height, y = weight)) +
geom_point() +
geom_label(aes(label = player))
ggplot(data = dat, aes(x = dat$salary)) + geom_density()
ggplot(data = dat, aes( x= position)) +
geom_bar()
# scatterplot by position
ggplot(data = dat, aes(x = points, y = salary)) +
geom_point(aes(color = position), alpha = 0.7) +
facet_grid(~ position) +
geom_smooth(method = loess)
# scatterplot by position
ggplot(data = dat, aes(x = points, y = salary)) +
geom_point(aes(color = position), alpha = 0.7) +
facet_grid(position ~ .) +
geom_smooth(method = loess)
# scatterplot by position
ggplot(data = dat, aes(x = experience, y = salary)) +
geom_point(aes(color = position), alpha = 0.7) +
facet_grid(~ position) +
geom_smooth(method = loess)
# scatterplot by team
ggplot(data = dat, aes(x = experience, y = salary)) +
geom_point(aes(color = team), alpha = 0.7) +
facet_wrap(team ~ .) +
geom_smooth(method = loess)
options(warn=-1)
# scatterplot by position
ggplot(data = dat, aes(x = height, y = weight)) +
geom_point(aes(color = position), alpha = 0.7) +
facet_wrap(position ~ .) +
geom_smooth(method = loess) + geom_density2d()
ggplot(data = filter(dat, dat$team == "GSW"), aes(x = experience, y = salary)) +
geom_point(size = .5) + theme_bw()
ggplot(data = filter(dat, dat$team == "GSW"), aes(x = experience, y = salary)) +
geom_point(size = .5) + theme_classic()
slice(dat, 1:5)
slice(dat, seq(10, 50, by = 5))
slice(dat, -(1:5))
filter(dat, height < 70)
filter(dat, team == "GSW")
filter(dat, team == "GSW", position == "C" )
select(filter(dat, team == "LAL"), player)
select(filter(dat, team == "GSW", position == "PG"), player, salary)
select(filter(dat, experience < 10, salary <= (10*10^6)), player, age, team)
slice(select(filter(dat, experience == 0, age == 20), player, team, height, weight), 1:5)
slice(select(arrange(dat, desc(points3)), player, team, points3), 1:10)
head(select(arrange(dat, desc(points3)), player, team, points3), 10)
# Another way
slice(select(arrange(dat, desc(points3)), player, team, points3), 1:10)
golden <- filter(dat, team == "GSW")
golden_plus <- mutate(golden, min_per_game = minutes/games)
result1 <- arrange(select(golden_plus, player, experience, min_per_game), desc(min_per_game))
df1 <- data.frame(result1)
View(df1)
dat$min_per_game <- dat$minutes/dat$games
gsw_mpg <- arrange(select(filter(dat, team == "GSW"), player, experience, min_per_game)) , desc(dat$min_per_game)
dat$min_per_game <- dat$minutes/dat$games
gsw_mpg <- arrange(select(filter(dat, team == "GSW"), player, experience, min_per_game) , desc(dat$min_per_game))
data.frame(arrange(select(mutate(filter(dat, team == "GSW"), min_per_game = minutes/games), player, experience, min_per_game), desc(min_per_game)))
ggplot(data = gsw, aes(x = height, y = weight)) +
geom_text(aes(label = player))
x <- c(1, 2, 4, 5, 6)
y <- c(3, 4)
x+y
x + y
x <- letters[1:10]
x[1:5]
head(x, 5)
slice(x, 1:5)
library(dplyr)
slice(x, 1:5)
x <- c(1, 2, 4, 7)
x <- factor(x)
x <- c(1, 2, 4, 7)
x <- c(1, 2, 4, 7)
x <- factor(x)
typeof(x)
?na.rm
??rm
uno <- c(TRUE, FALSE)
dos <- uno + 1L
tres <- c(uno, dos, "3.0", "4.0")
cuatro <- as.factor(tres)
typeof(cuatro)
typeof(tres)
?as.factor
typeof(as.factor(c("apples", "oranges", "fun")))
typeof(as.factor(c("apples", "oranges", FALSE)))
max_age <- max(warriors$age, na.rm = TRUE)
View(dat)
max_age <- max(dat$age, na.rm = TRUE)
which_max_age <- dat$age == max_age
dat$player[which_max_age]
gpa <- 4
gpa < 2.5
nba2018 %>%
group_by(team) %>%
summarise(
average_triple_points = mean(points3)) %>%
arrange(average_triple_points) %>%
tail(5)
lord <- c("v", "o", "l", "d", "e", "m", "o", "r", "t")
as.logical(-1:-4)
-1:-4
lord[as.logical(-1:-4)]
lord[c(1, 2, 3)]
as.logical(-1:-4)
lord[TRUE, TRUE ,TRUE, TRUE]
lord[c(TRUE, TRUE, TRUE, TRUE)]
lord[TRUE)]
lord[TRUE]
lord[TRUE, TRUE]
lord[c(TRUE, TRUE, TRUE)]
lord[c(TRUE, TRUE)]
lord[TRUE]
lord[1]
lord[2]
lord[c(1, 2)]
lord[seq(from = 1, to = 9, by = 2)]
lord[lord != "e" | lord == "o"]
sum(!is.finite(box))
sum(is.finite(box))
box <- c(-5, 33, 7, 3, 6, 2 ,6)
x[-which(x > 0)]
box[-which(box > 0)]
B <- matrix(c(3, 5, 6 , 3, 5, 4, 6, 7))
View(B)
?matrix
B <- matrix(c(3, 5, 6 , 3, 5, 4, 6, 7), nrow = 2, ncol = 4)
B$V1
colnames(dat)
rownames(dat)
names(dat)
rownames(dat)
names(dat)
colnames(dat)
dimnames(dat)
attributes(dat)
dat[-(1:5), -(4:6)]
View(dat)
dat[-(1:475), -(1:38)]
dat[-(1:475), -(1:37)]
dat[-(1:475), -(1:30)]
dat[-(1:470), -(1:30)]
dat[-(1:470), -(1:15)]
dat[-(11:477), -(1:15)]
rep(c(T, F), length = nrow(dat))
View(df1)
rep(c(T, F), length = nrow(df1))
odds <- rep(c(T, F), length = nrow(df1))
df1[odds, ]
length = nrow(df1)
df1[, -(1:3)]
df1[, -(1:2)]
df1[, -c(1:2)]
df1[, -c(2, 4, 6)]
cols3 = c(rep(TRUE, 3),
rep(FALSE, 3))
dat[, cols3]
trying <- dat[, cols3]
View(trying)
c(rep(TRUE, 3),
rep(FALSE, 3))
dat[ , 1, drop = FALSE]
?density
dos
dos[8]
x <- 2005:2015
y <- c(81, 83, 84.3, 85, 85.4, 86.5, 88.3,
88.6, 90.8, 91.1, 91.3)
x <- 2005:2015
y <- c(81, 83, 84.3, 85, 85.4, 86.5, 88.3,
88.6, 90.8, 91.1)
plot(x, y)
x <- 2005:2015
y <- c(81, 83, 84.3, 85, 85.4, 86.5, 88.3,
88.6, 90.8, 91.1, 91.3)
polygon(x, y, col = "blue", border = "red")
plot.newpolygon(x, y, col = "blue", border = "red")
plot.new()
polygon(x, y, col = "blue", border = "red")
?polygon
plot(x, y)
polygon(x, y, col = "blue", border = "red")
plot(x, y)
polygon(x, y, col = "blue")
plot(x, y)
polygon(x, y, col = "blue", border = "red")
?lm
lm(y ~ x)
lm(y ~ y)
lm(x ~ y)
y ~ x
plot.new()
plot.window(xlim = c(-4.5, 4.5), xaxs = "i",
ylim = c(-4.5, 4.5), yaxs = "i")
z <- lm(y ~ x)
abline(h = -4:4, v = -4:4, col = "lightgrey")
abline(a = coef(z)[1], b = coef(z)[2], lwd = 2, col = "red")
points(x, y)
axis(1)
axis(2)
box()
title(main = "A Fitted Regression Line")
points(x, y)
plot.new()
plot.window(xlim = c(2000, 2010), xaxs = "i",
ylim = c(0, 100), yaxs = "i")
z <- lm(y ~ x)
abline(h = -4:4, v = -4:4, col = "lightgrey")
abline(a = coef(z)[1], b = coef(z)[2], lwd = 2, col = "red")
points(x, y)
axis(1)
axis(2)
plot.new()
plot.window(xlim = c(2000, 2010), xaxs = "i",
ylim = c(0, 100), yaxs = "i")
z <- lm(y ~ x)
abline(h = -4:4, v = -4:4, col = "lightgrey")
abline(a = coef(z)[1], b = coef(z)[2], lwd = 2, col = "red")
axis(1)
axis(2)
points(x, y)
?axis
plot.new()
plot.window(xlim = c(0, 1), ylim = c(0, 1))
arrows(.05, .075, .45, .9, code = 1)
arrows(.55, .9, .95, .075, code = 2)
arrows(.1, 0, .9, 0, code = 3)
text(.5, 1, "A", cex = 1.5)
text(0, 0, "B", cex = 1.5)
text(1, 0, "C", cex = 1.5)
View(df1)
sd(df1$min_per_game)
is.vector(df1$min_per_game)
is.vector(df1[2])
is.vector(df1[,2])
view(B)
View(B)
viewer(https://www.facebook.com/?stype=lo&jlou=AfdH69x3EVMLzCyZf27Hr37go20uj7bnktAWokLKtqOvMSsmaPNy5C1RA0SD2EK7QoxSXVUwp-S59xKRDqntnlEFDYYQ2hHQe34sJaXGZVWTUw&smuh=7356&lh=Ac9gUioHQ8hJ0OSS&aik=8gNoSrZfOt_7BrtgR8zAtg)
viewer("https://www.facebook.com/?stype=lo&jlou=AfdH69x3EVMLzCyZf27Hr37go20uj7bnktAWokLKtqOvMSsmaPNy5C1RA0SD2EK7QoxSXVUwp-S59xKRDqntnlEFDYYQ2hHQe34sJaXGZVWTUw&smuh=7356&lh=Ac9gUioHQ8hJ0OSS&aik=8gNoSrZfOt_7BrtgR8zAtg")
?viewer
??vieer
browserViewer(browser = getOption("facebook.com"))
head(x, n = 5)
x[c(1:5)]
seq(from = 1.0, to = 2.0, by = 0.1)
rep(1:3, 2)
plot(x, y, pch = 1)
plot(x, y, pch = 3)
matrix(1:12, byrow = TRUE)
matrix(1:12, nrow = 3, ncol = 4)
matrix(1:12, nrow = 3, ncol = 4, byrow = TRUE)
matrix(1:12, nrow = 4, ncol = 3, byrow = TRUE)
?:
help(:)
??:
??":"
help(":")
license()
#Hello
plot(c(1, 3, 5), c(4, 6, 8))
#Hello
a <- plot(c(1, 3, 5), c(4, 6, 8))
a
#Hello
x <- c(1, 3, 5)
y <- c(4, 6, 8)
a <- plot(x, y)
a
#Hello
x <- c(1, 3, 5)
y <- c(4, 6, 8)
a <- plot(x, y)
a
#Hello
x <- c(1, 3, 5)
y <- c(4, 6, 8)
a <- plot(x, y)
a
#Hello
x <- c(1, 3, 5)
y <- c(4, 6, 8)
a <- plot(x, y)
a
?set.seed
set.seed(4)
a <- set.seed(4)
a
set.seed(4) rnorm(4)
set.seed(4)
rnorm(4)
rnorm(4)
rnorm(4)
rnorm(4)
set.seed(4)
rnorm(4)
set.seed(4)
rnorm(4)
rnorm(4)
rnorm(4)
set.seed(4)
rnorm(4)
set.seed(4)
rnorm(4)
?header
?header()
View(dat)
df1 <- data.frame(dat$weight, dat$player)
df1
dat[ ,-c(2, 3, 4)]
trying <- dat[ ,-c(2, 3, 4)]
View(trying)
View(dat)
var-name <- 4
[1:3] == [1:3]
c(1:3) == c(1:3)
View(dat)
library(dplyr)
dat %>%
filter(player == "Al Horford" & experience = 9) %>%
select(weight) %>%
arrange(desc(weight))
dat %>%
filter(player == "Al Horford" & experience = 9) %>%
select(dat$weight) %>%
arrange(desc(weight))
dat %>%
filter(player == "University of Washington" & experience >= 6) %>%
select(position)
dat %>%
filter(player == "University of Washington", experience >= 6) %>%
select(position)
dat %>%
filter(experience = 6)
dat %>%
filter(experience == 6)
?cbind()
?is.ordered
factor(B, ordered = is.ordered(B))
factor(B, ordered(B))
factor(B)
ordered = TRUE
setwd("/Users/sharonhui/Desktop/stat133-hws-fall18/workout1/data")
nba <-read.csv("../data/nba2018.csv")
nba$experience <- as.character(nba$experience)
nba$experience[nba$experience == "R"] <- 0
nba$experience <- as.integer(nba$experience)
nba$salary <- nba$salary/1000000
levels(nba$position)
levels(nba$position) <- c("center", "power_fwd", "point_guard", "small_fwd", "shoot_guard")
# Adding new variables
library(dplyr)
nba <- mutate(nba, missed_fg = (field_goals_atts - field_goals),
missed_ft = (points1_atts - points1),
rebounds = (off_rebounds + def_rebounds),
efficiency = ((points + rebounds + assists + steals + blocks - missed_fg - missed_ft - turnovers))/games)
setwd("/Users/sharonhui/Desktop/stat133-hws-fall18/workout1/data")
getwd()
setwd(Desktop/stat133-hws-fall18/workout1/data)
setwd("/Users/sharonhui/Desktop/hw-stat133/workout1/data")
nba <-read.csv("../data/nba2018.csv")
nba$experience <- as.character(nba$experience)
nba$experience[nba$experience == "R"] <- 0
nba$experience <- as.integer(nba$experience)
nba$salary <- nba$salary/1000000
levels(nba$position)
levels(nba$position) <- c("center", "power_fwd", "point_guard", "small_fwd", "shoot_guard")
# Adding new variables
library(dplyr)
nba <- mutate(nba, missed_fg = (field_goals_atts - field_goals),
missed_ft = (points1_atts - points1),
rebounds = (off_rebounds + def_rebounds),
efficiency = ((points + rebounds + assists + steals + blocks - missed_fg - missed_ft - turnovers))/games)
sink(file = "../output/efficiency-summary.txt")
summary(nba$efficiency)
sink()
### Creating nba2018-teams.csv
# With your updated data frame you will do some data aggregation—or grouped by operations— to create a data frame teams, computing total values, for each team, of the following required variables:
#  - team: 3-letter team abbreviation
#  - experience: sum of years of experience (up to 2 decimal digits)
#  - salary: total salary (in millions, up to 2 decimal digits)
#  - points3: total 3-Point Field Goals
#  - points2: total 2-Point Field Goals
#  - points1: total free throws
#  - points: total Points
#  - off_rebounds: total Offensive Rebounds
#  - def_rebounds: total Defensive Rebounds
#  - assists: total Assists
#  - steals: total Steals
#  - blocks: total Blocks
#  - turnovers: total Turnovers
#  - fouls: total fouls
#  - efficiency: total efficiency
teams <- data.frame(summarize((group_by(nba, team)), experience = sum(experience),
salary = sum(salary),
points3 = sum(points3),
points2 = sum(points2),
points1 = sum(points1),
points  = sum(points),
off_rebounds = sum(off_rebounds),
def_rebounds = sum(def_rebounds),
assists = sum(assists),
steals = sum(steals),
blocks = sum(blocks),
turnovers = sum(turnovers),
fouls = sum(fouls),
efficiency = sum(efficiency)
))
sink(file = "../output/teams-summary.txt")
summary(teams)
sink()
write.csv(teams, file = "../data/nba2018-teams.csv")
typeof(player)
typeof(nba$player)
typeof(nba$number)
typeof(nba$team)
typeof(nba$position)
View(nba)
str(nba)
setwd("/Users/sharonhui/Desktop/hw-stat133/workout1/data")
nba <-read.csv("../data/nba2018.csv", header = TRUE, stringsAsFactors = FALSE)
nba$experience <- as.character(nba$experience)
nba$experience[nba$experience == "R"] <- 0
nba$experience <- as.integer(nba$experience)
nba$salary <- nba$salary/1000000
levels(nba$position)
levels(nba$position) <- c("center", "power_fwd", "point_guard", "small_fwd", "shoot_guard")
# Adding new variables
library(dplyr)
nba <- mutate(nba, missed_fg = (field_goals_atts - field_goals),
missed_ft = (points1_atts - points1),
rebounds = (off_rebounds + def_rebounds),
efficiency = ((points + rebounds + assists + steals + blocks - missed_fg - missed_ft - turnovers))/games)
sink(file = "../output/efficiency-summary.txt")
summary(nba$efficiency)
sink()
### Creating nba2018-teams.csv
# With your updated data frame you will do some data aggregation—or grouped by operations— to create a data frame teams, computing total values, for each team, of the following required variables:
#  - team: 3-letter team abbreviation
#  - experience: sum of years of experience (up to 2 decimal digits)
#  - salary: total salary (in millions, up to 2 decimal digits)
#  - points3: total 3-Point Field Goals
#  - points2: total 2-Point Field Goals
#  - points1: total free throws
#  - points: total Points
#  - off_rebounds: total Offensive Rebounds
#  - def_rebounds: total Defensive Rebounds
#  - assists: total Assists
#  - steals: total Steals
#  - blocks: total Blocks
#  - turnovers: total Turnovers
#  - fouls: total fouls
#  - efficiency: total efficiency
teams <- data.frame(summarize((group_by(nba, team)), experience = sum(experience),
salary = sum(salary),
points3 = sum(points3),
points2 = sum(points2),
points1 = sum(points1),
points  = sum(points),
off_rebounds = sum(off_rebounds),
def_rebounds = sum(def_rebounds),
assists = sum(assists),
steals = sum(steals),
blocks = sum(blocks),
turnovers = sum(turnovers),
fouls = sum(fouls),
efficiency = sum(efficiency)
))
sink(file = "../output/teams-summary.txt")
summary(teams)
sink()
write.csv(teams, file = "../data/nba2018-teams.csv")
str(nba)
View(nba)
View(nba)
knitr::opts_chunk$set(echo = TRUE)
teams <- read.csv("../data/nba2018-teams.csv")
library(ggplot2)
ggplot(data = teams, aes(x = reorder(team, salary), y = salary)) + geom_bar(stat = "identity") + coord_flip() + xlab("Team") + ylab("Salary") + ggtitle("NBA Teams Ranked by Total Salary", subtitle = NULL) + geom_hline(yintercept = mean(teams$salary), color = "red")
teams <- read.csv("../data/nba2018-teams.csv")
library(ggplot2)
ggplot(data = teams, aes(x = reorder(team, salary), y = salary)) +
geom_bar(stat = "identity") +
coord_flip() + xlab("Team") +
ylab("Salary") +
ggtitle("NBA Teams Ranked by Total Salary", subtitle = NULL) +
geom_hline(yintercept = mean(teams$salary), color = "red")
